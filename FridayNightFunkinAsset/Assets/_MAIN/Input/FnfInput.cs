//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_MAIN/Input/FnfInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FnfInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FnfInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FnfInput"",
    ""maps"": [
        {
            ""name"": ""PlayableArrow"",
            ""id"": ""239a51ba-7546-425b-aecf-7bbfd465bdd6"",
            ""actions"": [
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""ee19ce48-2e0f-4347-9cf6-fdaf867173eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""eff87edb-792a-4ef9-8808-c7de4760bed3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""29f5b4d8-93d2-4772-a35a-9e216f25aadc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Value"",
                    ""id"": ""74e8075e-1303-4a92-8ff1-aa72ce5ccf75"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1de7505c-5a5d-43a2-a607-6898da44457b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""arrows"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""591bea0b-08a2-4325-892d-d149e6667b3e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""arrows"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8a46f3b-4f59-4d1f-a0ea-1b3f5dbc3598"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""arrows"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f39c9da-d3b6-46b5-b3df-7ff73777ad05"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba363d18-af35-4576-abe1-b694f2f302f9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""arrows"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51c7279b-5e28-4628-af96-bd3d8870fba0"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f9bf78f-dff9-4c01-8bd9-7805bf134c7e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""arrows"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5857e8e6-8ee4-41ce-b083-9da231870d2a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuNavigation"",
            ""id"": ""8ba76384-5f78-4013-9431-06de9031013e"",
            ""actions"": [
                {
                    ""name"": ""IncreaseSound"",
                    ""type"": ""Button"",
                    ""id"": ""9ffe22e4-e583-4af4-85dd-801b867299ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DecreseSound"",
                    ""type"": ""Button"",
                    ""id"": ""cd4ee26d-ca4b-42a7-8103-cde73e271bbf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mute"",
                    ""type"": ""Button"",
                    ""id"": ""65a3ca50-a7f7-4d5c-965b-6b8ebf98f054"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""ae7afea6-5410-4328-897d-03da5955e891"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipCutscene"",
                    ""type"": ""Button"",
                    ""id"": ""81091d90-95b8-4f0f-9fd8-b37dc31989e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""876c8abe-cc83-4422-a0c7-6b470ef4d461"",
                    ""path"": ""<Keyboard>/equals"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncreaseSound"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""087ce1c5-dcc8-4f18-a83e-097a3996dd40"",
                    ""path"": ""<Keyboard>/f12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncreaseSound"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef5c29fd-aa81-483c-8f78-7cfe771fe5f2"",
                    ""path"": ""<Keyboard>/minus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecreseSound"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f376ad5b-5504-40c9-b797-43d584739da4"",
                    ""path"": ""<Keyboard>/f11"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecreseSound"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9c992db-d1ba-4e02-8498-743a271b4d43"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf761853-3e15-490a-9940-10f02f775187"",
                    ""path"": ""<Keyboard>/f10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc1b0af8-1ac0-4d57-83e2-d2eba0d759a8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c623b2c6-82dc-4cac-b3e4-b19546ea59da"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipCutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5afdfc50-99cd-4550-b886-0b797d129f24"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipCutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""arrows"",
            ""bindingGroup"": ""arrows"",
            ""devices"": []
        }
    ]
}");
        // PlayableArrow
        m_PlayableArrow = asset.FindActionMap("PlayableArrow", throwIfNotFound: true);
        m_PlayableArrow_Down = m_PlayableArrow.FindAction("Down", throwIfNotFound: true);
        m_PlayableArrow_Up = m_PlayableArrow.FindAction("Up", throwIfNotFound: true);
        m_PlayableArrow_Right = m_PlayableArrow.FindAction("Right", throwIfNotFound: true);
        m_PlayableArrow_Left = m_PlayableArrow.FindAction("Left", throwIfNotFound: true);
        // MenuNavigation
        m_MenuNavigation = asset.FindActionMap("MenuNavigation", throwIfNotFound: true);
        m_MenuNavigation_IncreaseSound = m_MenuNavigation.FindAction("IncreaseSound", throwIfNotFound: true);
        m_MenuNavigation_DecreseSound = m_MenuNavigation.FindAction("DecreseSound", throwIfNotFound: true);
        m_MenuNavigation_Mute = m_MenuNavigation.FindAction("Mute", throwIfNotFound: true);
        m_MenuNavigation_Escape = m_MenuNavigation.FindAction("Escape", throwIfNotFound: true);
        m_MenuNavigation_SkipCutscene = m_MenuNavigation.FindAction("SkipCutscene", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayableArrow
    private readonly InputActionMap m_PlayableArrow;
    private List<IPlayableArrowActions> m_PlayableArrowActionsCallbackInterfaces = new List<IPlayableArrowActions>();
    private readonly InputAction m_PlayableArrow_Down;
    private readonly InputAction m_PlayableArrow_Up;
    private readonly InputAction m_PlayableArrow_Right;
    private readonly InputAction m_PlayableArrow_Left;
    public struct PlayableArrowActions
    {
        private @FnfInput m_Wrapper;
        public PlayableArrowActions(@FnfInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Down => m_Wrapper.m_PlayableArrow_Down;
        public InputAction @Up => m_Wrapper.m_PlayableArrow_Up;
        public InputAction @Right => m_Wrapper.m_PlayableArrow_Right;
        public InputAction @Left => m_Wrapper.m_PlayableArrow_Left;
        public InputActionMap Get() { return m_Wrapper.m_PlayableArrow; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayableArrowActions set) { return set.Get(); }
        public void AddCallbacks(IPlayableArrowActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayableArrowActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayableArrowActionsCallbackInterfaces.Add(instance);
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
        }

        private void UnregisterCallbacks(IPlayableArrowActions instance)
        {
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
        }

        public void RemoveCallbacks(IPlayableArrowActions instance)
        {
            if (m_Wrapper.m_PlayableArrowActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayableArrowActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayableArrowActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayableArrowActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayableArrowActions @PlayableArrow => new PlayableArrowActions(this);

    // MenuNavigation
    private readonly InputActionMap m_MenuNavigation;
    private List<IMenuNavigationActions> m_MenuNavigationActionsCallbackInterfaces = new List<IMenuNavigationActions>();
    private readonly InputAction m_MenuNavigation_IncreaseSound;
    private readonly InputAction m_MenuNavigation_DecreseSound;
    private readonly InputAction m_MenuNavigation_Mute;
    private readonly InputAction m_MenuNavigation_Escape;
    private readonly InputAction m_MenuNavigation_SkipCutscene;
    public struct MenuNavigationActions
    {
        private @FnfInput m_Wrapper;
        public MenuNavigationActions(@FnfInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @IncreaseSound => m_Wrapper.m_MenuNavigation_IncreaseSound;
        public InputAction @DecreseSound => m_Wrapper.m_MenuNavigation_DecreseSound;
        public InputAction @Mute => m_Wrapper.m_MenuNavigation_Mute;
        public InputAction @Escape => m_Wrapper.m_MenuNavigation_Escape;
        public InputAction @SkipCutscene => m_Wrapper.m_MenuNavigation_SkipCutscene;
        public InputActionMap Get() { return m_Wrapper.m_MenuNavigation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuNavigationActions set) { return set.Get(); }
        public void AddCallbacks(IMenuNavigationActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuNavigationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuNavigationActionsCallbackInterfaces.Add(instance);
            @IncreaseSound.started += instance.OnIncreaseSound;
            @IncreaseSound.performed += instance.OnIncreaseSound;
            @IncreaseSound.canceled += instance.OnIncreaseSound;
            @DecreseSound.started += instance.OnDecreseSound;
            @DecreseSound.performed += instance.OnDecreseSound;
            @DecreseSound.canceled += instance.OnDecreseSound;
            @Mute.started += instance.OnMute;
            @Mute.performed += instance.OnMute;
            @Mute.canceled += instance.OnMute;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @SkipCutscene.started += instance.OnSkipCutscene;
            @SkipCutscene.performed += instance.OnSkipCutscene;
            @SkipCutscene.canceled += instance.OnSkipCutscene;
        }

        private void UnregisterCallbacks(IMenuNavigationActions instance)
        {
            @IncreaseSound.started -= instance.OnIncreaseSound;
            @IncreaseSound.performed -= instance.OnIncreaseSound;
            @IncreaseSound.canceled -= instance.OnIncreaseSound;
            @DecreseSound.started -= instance.OnDecreseSound;
            @DecreseSound.performed -= instance.OnDecreseSound;
            @DecreseSound.canceled -= instance.OnDecreseSound;
            @Mute.started -= instance.OnMute;
            @Mute.performed -= instance.OnMute;
            @Mute.canceled -= instance.OnMute;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @SkipCutscene.started -= instance.OnSkipCutscene;
            @SkipCutscene.performed -= instance.OnSkipCutscene;
            @SkipCutscene.canceled -= instance.OnSkipCutscene;
        }

        public void RemoveCallbacks(IMenuNavigationActions instance)
        {
            if (m_Wrapper.m_MenuNavigationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuNavigationActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuNavigationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuNavigationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuNavigationActions @MenuNavigation => new MenuNavigationActions(this);
    private int m_arrowsSchemeIndex = -1;
    public InputControlScheme arrowsScheme
    {
        get
        {
            if (m_arrowsSchemeIndex == -1) m_arrowsSchemeIndex = asset.FindControlSchemeIndex("arrows");
            return asset.controlSchemes[m_arrowsSchemeIndex];
        }
    }
    public interface IPlayableArrowActions
    {
        void OnDown(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
    }
    public interface IMenuNavigationActions
    {
        void OnIncreaseSound(InputAction.CallbackContext context);
        void OnDecreseSound(InputAction.CallbackContext context);
        void OnMute(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnSkipCutscene(InputAction.CallbackContext context);
    }
}
